{
    "collab_server" : "",
    "contents" : "\n# This is the server logic for a Shiny web application.\n# You can find out more about building applications with Shiny here:\n#\n# http://shiny.rstudio.com\n#\n\nlibrary(shiny)\nlibrary(data.table)\nlibrary(dplyr)\nlibrary(ggplot2)\nlibrary(lubridate)\nlibrary(stringr)\nlibrary(rebus)\n\nshinyServer(function(input, output,session) {\n  \n  lookuptable <- read.csv(\"operator/lookupTable.csv\",header = T)\n  #sr_main1<- read.csv(\"EVRDATA/SR_MAIN_1.csv\",header = T)\n  sr_main1 <- read.table(\"EVRDATA/EVR_SR_MAIN_201706012357293.txt\",sep =\",\",dec = \".\")\n  colnames(sr_main1)<-c(\"SCTS\",\"SCMSGREF\",\"SRORIGADDR\",\"SRDESTADDR\",\"MSGID\",\"SR_SCTS\",\n                        \"SM_STATUS\",\"SM_ERRCODE\",\"CAUSE\",\"EVENT\",\"ACCESSMETHOD\",\"DIALLED_NUM\",\n                        \"LOGGINGTIME\",\"NODE_ID\",\"MAP_MESSAGE_ID\") \n  \n # sr_main1$LOGGINGTIME<-substr(sr_main1$LOGGINGTIME,1,8)\n  sr_main2 <- read.table(\"EVRDATA/EVR_SR_MAIN_201706012357594.txt\",sep=\",\",dec = \".\")\n  colnames(sr_main2)<-c(\"SCTS\",\"SCMSGREF\",\"SRORIGADDR\",\"SRDESTADDR\",\"MSGID\",\"SR_SCTS\",\n                        \"SM_STATUS\",\"SM_ERRCODE\",\"CAUSE\",\"EVENT\",\"ACCESSMETHOD\",\"DIALLED_NUM\",\n                        \"LOGGINGTIME\",\"NODE_ID\",\"MAP_MESSAGE_ID\") \n  \n  \n # sr_main2$LOGGINGTIME<-substr(sr_main2$LOGGINGTIME,1,8)\n  sr_main <- rbind (sr_main1 ,sr_main2)\n  timeVar <- sr_main$LOGGINGTIME\n  sr_main$Hour <-str_sub(timeVar,start = 9 ,end = -7)\n  sr_main$minute <- str_sub(timeVar, start = 11, end =-5)\n  sr_main$second <- str_sub (timeVar,start = 13 , end = -3)\n  sr_main$millisec <- str_sub(timeVar,start = 15 , end = -1 )\n  \n  #sr_main$hour <- str_sub(sr_main$LOGGINGTIME,)\n  #sr_main$minute <- str_sub(sr_main$LOGGINGTIME,-8)\n  sr_main$LOGGINGTIME<-substr(sr_main$LOGGINGTIME,1,8)\n  \n  sr_main$LOGGINGTIME<-ymd(sr_main$LOGGINGTIME)\n  \n  sm_detail1 <- read.table(\"EVRDATA/EVR_SM_DETAIL_201706012357293.txt\",sep = \",\",dec = \".\")\n  colnames(sm_detail1)<- c(\"SCTS\",\"SCMSGREF\",\"RECORDTYPE\",\"CAUSE\",\"EVENT\",\n                          \"LOGGINGTIME\",\"DEST_IMSI\",\"DEST_VMSCADDR\",\"NUMOFDELATTEMPTS\",\n                          \"ACCESSMETHOD\",\"SMORIGADDR\",\"APP_NUM\",\"SMDESTADDR\",\"ROUTING_TYPE\"\n                          ,\"NODE_ID\",\"MAP_MESSAGE_ID\")\n  \n  sm_detail2 <- read.table(\"EVRDATA/EVR_SM_DETAIL_201706012357594.txt\",sep = \",\",dec = \".\")\n  colnames(sm_detail2)<- c(\"SCTS\",\"SCMSGREF\",\"RECORDTYPE\",\"CAUSE\",\"EVENT\",\n                           \"LOGGINGTIME\",\"DEST_IMSI\",\"DEST_VMSCADDR\",\"NUMOFDELATTEMPTS\",\n                           \"ACCESSMETHOD\",\"SMORIGADDR\",\"APP_NUM\",\"SMDESTADDR\",\"ROUTING_TYPE\"\n                           ,\"NODE_ID\",\"MAP_MESSAGE_ID\")\n  sm_detail <- rbind(sm_detail1,sm_detail2)\n  sr_main <- sr_main[ ,c(\"MAP_MESSAGE_ID\",\"SM_STATUS\",\"SM_ERRCODE\",\"LOGGINGTIME\",\"Hour\",\"minute\"\n                         ,\"second\",\"millisec\")]\n  sm_detail <- sm_detail[,c(\"MAP_MESSAGE_ID\",\"CAUSE\",\"RECORDTYPE\",\"EVENT\",\"DEST_VMSCADDR\")]\n  mergSRMainSMDetail <- merge(sr_main,sm_detail, by = c(\"MAP_MESSAGE_ID\"))\n  \n  #  m <- merge(mergSRMainSMDetail,sm_main,by =  c (\"MAP_MESSAGE_ID\"))\n  #mergSRMainSMDetail$DEST_VMSCADDR <- floor (mergSRMainSMDetail$DEST_VMSCADDR/100000)\n  \n  a <- mergSRMainSMDetail\n  #a$DEST_VMSCADDR<- as.character(a$DEST_VMSCADDR)\n  b<-  lookuptable\n  #b$vmsc_no<- as.character(b$vmsc_no)\n  a<-as.data.frame(a)\n  b<- as.data.frame(b)\n  \n  colnames(a)\n  colnames(b)\n   \n  df1<- as.data.frame(a)\n  df1 <- df1[complete.cases(df1),]\n  df2<- as.data.frame(b)\n  \n  df2 <- df2[complete.cases(df2),]\n  \n  names(df1) [names(df1)=='DEST_VMSCADDR'] <- 'Vmsc'\n  names(df2)[names(df2)=='vmsc_no'] <- 'vmsc'\n  colnames(df1)\n  colnames(df2)\n  \n  df3<-df1 %>%\n    # USE str_extract  to get vmsc matched in df2\n    mutate(Vmsc = str_extract(string = formatC(Vmsc, \n                                               digits = 0, \n                                               format = \"f\"), \n                              pattern = or1(df2$vmsc))) %>%\n    # Join with df2 by the updated vmsc\n    left_join(df2 %>% \n                mutate(Vmsc = as.character(vmsc)) %>%\n                select(-vmsc), \n              by = \"Vmsc\")\n  \n  \n  \n  \n  options(scipen = 999)\n  observe({\n   y<- unique(lookuptable$operator_circle)\n  updateSelectInput(session ,\"circle\",label = \"select the operator\",\n  choices = y,selected = \"Gujarat\")\n  })\n  output$plot1 <- renderPlot({\n    df3 <- df3[which(df3$operator_circle==input$circle\n                     & df3$SM_STATUS ==  input$msgType\n                     & df3$LOGGINGTIME >= input$dateRange[1] \n                     & df3$LOGGINGTIME <= input$dateRange[2]\n                     ),]\n    g<- ggplot(df3 %>% count(operator_name, operator_circle) %>%   \n                 # Group by region and species, then count number in each group\n                 mutate(pct=n/sum(n),               # Calculate percent within each region\n                xypos = cumsum(n) - 0.5*n),  # Calculate label positions\n               aes(operator_name, n, fill=operator_circle)) +\n      geom_bar(stat=\"identity\", width = 0.2) + coord_flip() +\n      geom_text(aes(label=n),  vjust=-1.1) + ggtitle(\"Message Status\")\n    g\n  })\n  output$table <- renderDataTable({\n   # mergSRMainSMDetail\n    #df3 <- unique(df3[which(df3$operator_circle==input$circle\n            #         & df3$SM_STATUS == \"UNDELIV\"),]\n    df3 <- df3[which(\n                   df3$operator_circle==input$circle &\n                              df3$LOGGINGTIME >= input$dateRange[1] \n                            & df3$LOGGINGTIME <= input$dateRange[2]\n    ),]\n    colnames(df3)[4]<- \"Time(YYYY-mm-dd)\"\n    df3<- (df3)\n  })\n\n})\n",
    "created" : 1499849427145.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "4130321134",
    "id" : "D3594140",
    "lastKnownWriteTime" : 1500016541,
    "last_content_update" : 1500016541613,
    "path" : "~/dashboard/EvrVMSCSearch/server.R",
    "project_path" : "server.R",
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}