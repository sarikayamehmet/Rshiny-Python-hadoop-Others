shiny::runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
shiny::runApp()
latLong_data <- read.csv("/lat-long-data/latLong.csv",header = T)
latLong_data <- read.csv("C:/Users/Aman Kumar/Documents/dashboard/RouteMobileDashboard/lat-long-data",header = T)
latLong_data <- read.csv("C:/Users/Aman Kumar/Documents/dashboard/RouteMobileDashboard/lat-long-data/latLong.csv",header = T)
View(latLong_data)
?left_join
a<- read.csv(file.choose(),header = T)
lat<- read.csv(file.choose(),header = T)
left_join(a,lat,by = c("terminatingCircle"="State"))
bn<-left_join(a,lat,by = c("terminatingCircle"="State"))
bn
View(bn)
runApp()
latLong_data <- read.csv("C:/Users/Aman Kumar/Documents/dashboard/RouteMobileDashboard/lat-long-data/latLong.csv",header = T)
colnames(latLong_data)
runApp()
runApp()
data.frame<- read.csv(file.choose(),header = T)
datsetFrame<-data.frame
datsetFrame <- datsetFrame[,c("terminatingCircle","procDate","senderId")]
datsetFrame$procDate = as.Date(datsetFrame$procDate)
datsetFrame <- datsetFrame[which(
datasetFrame$senderId == input$senderId
#& datsetFrame$procDate <= as.Date(input$dateRangeID[2])
#& datsetFrame$procDate >= as.Date(input$dateRangeID[1])
),]
datsetFrame<-data.frame
datsetFrame <- datsetFrame[,c("terminatingCircle","procDate","senderId")]
datsetFrame$procDate = as.Date(datsetFrame$procDate)
datsetFrame <- datsetFrame[which(
datasetFrame$senderId == input$senderId
#& datsetFrame$procDate <= as.Date(input$dateRangeID[2])
#& datsetFrame$procDate >= as.Date(input$dateRangeID[1])
),]
datsetFrame <- datsetFrame[which(
datsetFrame$senderId == input$senderId
#& datsetFrame$procDate <= as.Date(input$dateRangeID[2])
#& datsetFrame$procDate >= as.Date(input$dateRangeID[1])
),]
withProgress(message = 'Calculation in progress',
detail = 'This may take a while...', value = 0, {
for (i in 1:15) {
incProgress(1/15)
Sys.sleep(0.25)
}
})
june1<-ggplot(datsetFrame, aes(senderId) ) +
geom_bar() + geom_text(stat='count',aes(label=..count..),vjust=-1)
june1
library(ggplot2)
june1<-ggplot(datsetFrame, aes(senderId) ) +
geom_bar() + geom_text(stat='count',aes(label=..count..),vjust=-1)
june1
shiny::runApp()
runApp()
runApp()
runApp()
june1<-ggplot(datsetFrame, aes(senderId) ) +
geom_bar(stat = "count",width = 0.1) + geom_text(stat='count',aes(label=..count..),vjust=-1)
june1
runApp()
runApp()
g<- ggplot(datsetFrame %>% count(senderId, msgType) %>%    # Group by region and species, then count number in each group
mutate(pct=n/sum(n),               # Calculate percent within each region
ypos = cumsum(n) - 0.5*n),  # Calculate label positions
aes(senderId, n, fill=msgType)) +
geom_bar(stat="identity", width = 0.2) + ggtitle("Types Of Message send by sender")
datsetFrame <- datsetFrame[,c("terminatingOperator","terminatingCircle","procDate","msgType","senderId")]
datsetFrame<-data.frame
datsetFrame <- datsetFrame[,c("terminatingOperator","terminatingCircle","procDate","msgType","senderId")]
datsetFrame$procDate = as.Date(datsetFrame$procDate)
g<- ggplot(datsetFrame %>% count(senderId, msgType) %>%    # Group by region and species, then count number in each group
mutate(pct=n/sum(n),               # Calculate percent within each region
ypos = cumsum(n) - 0.5*n),  # Calculate label positions
aes(senderId, n, fill=msgType)) +
geom_bar(stat="identity", width = 0.2) + ggtitle("Types Of Message send by sender")
geom_text(aes(label=n),  vjust=-1.1) + labs(y = "Type of message")
g<- ggplot(datsetFrame %>% count(senderId, msgType) %>%    # Group by region and species, then count number in each group
mutate(pct=n/sum(n),               # Calculate percent within each region
ypos = cumsum(n) - 0.5*n),  # Calculate label positions
aes(senderId, n, fill=msgType)) +
geom_bar(stat="identity", width = 0.2) + ggtitle("Types Of Message send by sender")+
geom_text(aes(label=n),  vjust=-1.1) + labs(y = "Type of message")
g
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
library(ggplot2)
?ggsave
shiny::runApp()
runApp()
runApp()
?downloadHandler
?reactive
?reactivePoll
library(shiny)
?reactivePoll
install.packages("readr")
?list.files
isThereNewFile = function(){
#  cheap function whose values over time will be tested for equality;
#  inequality indicates that the underlying value has changed and needs to be
#  invalidated and re-read using valueFunc
filesnams<- list.files(path = "master_data",pattern = " *.csv",full.names = TRUE)
length(filesnams)
}
isThereNewFile()
ReadAllData=function(){ # A function that calculates the underlying value
filenames <- list.files(path ="master_data",pattern="*.csv", full.names=TRUE)
read_csv(filenames[length(filenames)])
}
ReadAllData()
??read.csv
ReadAllData=function(){ # A function that calculates the underlying value
filenames <- list.files(path ="master_data",pattern="*.csv", full.names=TRUE)
#read_csv(filenames[length(filenames)])
}
read_csv(filenames[length(filenames)])
library(gridExtra)
library(gridExtra)
ReadAllData=function(){ # A function that calculates the underlying value
filenames <- list.files(path ="master_data",pattern="*.csv", full.names=TRUE)
read_csv(filenames[length(filenames)])
}
sampled_data <- reactivePoll(600000,session,isThereNewFile,ReadAllData)
sampled_data()
sampled_data <- reactivePoll(600000,session,isThereNewFile,ReadAllData)
runApp()
shiny::runApp()
shiny::runApp()
