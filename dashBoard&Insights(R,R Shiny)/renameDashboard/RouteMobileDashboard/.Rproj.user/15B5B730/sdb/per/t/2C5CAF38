{
    "collab_server" : "",
    "contents" : "\n# This is the server logic for a Shiny web application.\n# You can find out more about building applications with Shiny here:\n#\n# http://shiny.rstudio.com\n#\n\nlibrary(shiny)\nlibrary(RMySQL)\nlibrary(ggplot2)\nlibrary(leaflet)\nlibrary(htmltools)\nlibrary(ggmap)\nlibrary(dplyr)\n\n\n\n\n\"getDbData<- function(){\n  mydb = dbConnect(MySQL(),user = 'root' , password = 'd@em0n51',\n                   dbname = 'parser' , host = 'localhost')\"\n  #rs = dbSendQuery(mydb ,\"select * from master_copy \")\n  \"data.frame <- fetch(rs ,n = 12435696)\n  return(data.frame)\n}\"\n\nshinyServer(function(input, output,session) {\n  \n  ### Iniiaize my data\n  \n  #data.frame <<-getDbData()\n  \n  \n  #mydb = dbConnect(MySQL(),user= 'root',password = 'd@em0n51',\n   #                dbname = 'parser',host = 'localhost')\n  \n  #rs = dbSendQuery(mydb, \"select * from master_copy\")\n  \n  #data.frame <- fetch(rs , n = 124)\n  a<-read.csv(\"master_10000.csv\",header = T)\n # a<-a[1:500,]\n  data.frame<-a\n  datasetFrame <- a\n  \n  #data frame for map data\n  \n  b<-table(data.frame$terminatingCircle,data.frame$terminatingOperator)\n  bn <- as.data.frame(b)\n  bn<-aggregate(bn$Freq, by=list(Category=bn$Var1), FUN=sum)\n  colnames(bn)<- c(\"terminatingCircle\",\"DeliveryCount\")\n  origAddress<-bn\n  \n\n  # end of map data data subsetting\n  \n  #### getting the data for missed call \n  tab1<-read.csv(\"tab1.csv\",header = T)\n  tab2<-read.csv(\"tab2.csv\",header = T)\n  tab3<-read.csv(\"tab3.csv\",header = T)\n  tab4<-read.csv(\"tab4.csv\",header = T)\n  tab5<-read.csv(\"tab5.csv\",header = T)\n  tab6<-read.csv(\"tab6.csv\",header = T)\n  \n  dataFormatFinal<-rbind(tab1,tab2,tab3,tab4,tab5,tab6)\n  \n  dataFormatFinal <- subset(dataFormatFinal, \n     select = c(iUserId,day,time,Hour,iAllotedVMN,date))\n  \n  \n  # updating the select Input and VMN\n  observe({\n    x<-unique(dataFormatFinal$iAllotedVMN)\n    updateSelectInput(session,\"vmn\",label = \"Select the VMN\",choices =x,\n                      selected = \"9222281818\")\n  })\n  observe({\n    y<-unique(dataFormatFinal$iUserId)\n    updateSelectInput(session ,\"userId\",label = \"select the USERID\",\n                      choices = y,selected = \"950\")\n  })\n  observe({\n    \n    x<- unique(datsetFrame$terminatingCircle)\n    \n    updateSelectInput(session,\"terminatingCircle\",label = \"Select the Terminating Circle\",choices =x,\n                      selected = \"Mumbai\")\n  })\n  \n \n  output$plot1 <- renderPlot({\n    \n    dataFormatFinal<-dataFormatFinal[which( dataFormatFinal$iAllotedVMN == input$vmn),]\n    \n    withProgress(message = 'Calculation in progress',\n                 detail = 'This may take a while...', value = 0, {\n                   for (i in 1:15) {\n                     incProgress(1/15)\n                     Sys.sleep(0.25)\n                   }\n                 })\n    june1<-ggplot(dataFormatFinal, aes(Hour) ) +\n      geom_bar() +  ggtitle(paste(\"MISSED CALL PER HOUR :June\",input$day))+ geom_text(stat='count',aes(label=..count..),vjust=-1)\n    june1 <- june1 + scale_x_discrete(name = \"Hour\",limits = c(\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"10\",\"11\",\"12\",\"13\",\"14\",\"15\"\n                                                               ,\"16\",\"17\",\"18\",\"19\",\"20\",\"21\",\"22\",\"23\"))\n    june1\n    \n    \n  })\n  output$mymap<- renderLeaflet({\n    withProgress(message = 'Calculation in progress',\n                 detail = 'This may take a while...', value = 0, {\n                   for (i in 1:15) {\n                     incProgress(1/15)\n                     Sys.sleep(0.25)\n                   }\n                 })\n    \n    for (i in 1:nrow(origAddress )){\n      result <- geocode(as.character(origAddress$terminatingCircle[i]),output = \"latlona\", source = \"google\")\n      origAddress$long[i] <- as.numeric(result[1])\n      origAddress$lat[i] <- as.numeric(result[2])\n    }\n    withProgress(message = 'Calculation in progress',\n                 detail = 'This may take a while...', value = 0, {\n                   for (i in 1:15) {\n                     incProgress(1/15)\n                     Sys.sleep(0.25)\n                   }\n                 })\n    \n    origAddress$lat<-as.numeric(as.character(origAddress$lat))\n    origAddress$long<- as.numeric(as.character(origAddress$long))\n    colnames(origAddress)<- c(\"terminatingCircle\",\"DeliveryCount\",\"long\",\"lat\")\n    leeafletData<-origAddress[complete.cases(origAddress),]\n  \n    m<-leaflet(leeafletData) %>% addTiles() %>%\n      addMarkers(~long,~lat,label = \"No of message delivered\",popup = ~htmlEscape(\n        as.character(DeliveryCount)\n      ))\n    withProgress(message = 'Calculation in progress',\n                 detail = 'This may take a while...', value = 0, {\n                   for (i in 1:15) {\n                     incProgress(1/15)\n                     Sys.sleep(0.25)\n                   }\n                 })\n    m\n  })\n  \n  output$table <- renderDataTable({\n    \n    dataFormatFinalHour<- dataFormatFinal[which(\n      dataFormatFinal$iAllotedVMN == input$vmn & dataFormatFinal$iUserId == input$userId\n    ),]\n    dataFormatFinalHour\n    })\n  \n  output$plot2<- renderPlot({\n    \n   # datsetFrame<-data.frame\n    datsetFrame <- a[c(\"terminatingOperator\",\"terminatingCircle\",\"procDate\")]\n    datsetFrame$procDate = as.Date(datsetFrame$procDate)\n    datsetFrame <- datsetFrame[which(#datsetFrame$terminatingOperator == input$terminatingOperator \n    datsetFrame$terminatingCircle == input$terminatingCircle\n    #& datsetFrame$procDate <= as.Date(input$dateRangeID[2])\n    #& datsetFrame$procDate >= as.Date(input$dateRangeID[1])\n    ),]\n    ###\n    withProgress(message = 'Calculation in progress',\n                 detail = 'This may take a while...', value = 0, {\n                   for (i in 1:15) {\n                     incProgress(1/15)\n                     Sys.sleep(0.25)\n                   }\n                 })\n    g<- ggplot(datsetFrame %>% count(terminatingOperator, terminatingCircle) %>%    # Group by region and species, then count number in each group\n                 mutate(pct=n/sum(n),               # Calculate percent within each region\n                        ypos = cumsum(n) - 0.5*n),  # Calculate label positions\n               aes(terminatingOperator, n, fill=terminatingCircle)) +\n      geom_bar(stat=\"identity\", width = 0.2) + coord_flip() +\n      geom_text(aes(label=n),  vjust=-1.1)\n    # geom_text(aes(label=paste0(sprintf(\"%1.1f\", pct*100),\"%\"), y=ypos))\n    g\n    \n  })\n  \n  \n  \n\n})",
    "created" : 1499075984990.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "647121573",
    "id" : "2C5CAF38",
    "lastKnownWriteTime" : 1499237884,
    "last_content_update" : 1499237884709,
    "path" : "~/dashboard/RouteMobileDashboard/server.R",
    "project_path" : "server.R",
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}