{
    "collab_server" : "",
    "contents" : "\n# This is the server logic for a Shiny web application.\n# You can find out more about building applications with Shiny here:\n#\n# http://shiny.rstudio.com\n#\n\nlibrary(shiny)\n\nshinyServer(function(input, output) {\n  \n  options(scipen = 999)\n  \n  get_SmMain_data<- function(){\n  \n    sm_main1 <- read.table(\"EVRDATA/EVR_SM_MAIN_201706012357293.txt\",sep = \",\",dec = \",\")\n    colnames(sm_main1) <- c(\"SCTS\",\"SCMSGREF\",\"RECORDTYPE\",\"CAUSE\",\"EVENT\",\"LOGGINGTIME\",\n                            \"ACCESSMETHOD\",\"SMORIGADDR\",\"SMDESTADDR\",\"DISPLAYADDRVALUE\",\"ORIGADDR_TYPE\",\"DESTADDR_TYPE\",\n                            \"ORIG_IMSI\",\"ORIG_VMSC\",\"MSG_LEN\",\"PID\",\"DCS\",\"DSR_REQ\",\"PRIORITY\"\n                            ,\"CONCAT_INFO\",\"CLIENT_ID\",\"SUBS_TYPE\",\"APP_NUM\",\"VALIDITY_PERIOD\"\n                            ,\"DIALLED_NUM\",\"ROUTING_TYPE\",\"NODE_ID\",\"MAP_MESSAGE_ID\")\n    sm_main2 <- read.table(\"EVRDATA/EVR_SM_MAIN_201706012357594.txt\",sep = \",\",dec = \",\")\n    colnames(sm_main2)<- c(\"SCTS\",\"SCMSGREF\",\"RECORDTYPE\",\"CAUSE\",\"EVENT\",\"LOGGINGTIME\",\n                           \"ACCESSMETHOD\",\"SMORIGADDR\",\"SMDESTADDR\",\"DISPLAYADDRVALUE\",\"ORIGADDR_TYPE\",\"DESTADDR_TYPE\",\n                           \"ORIG_IMSI\",\"ORIG_VMSC\",\"MSG_LEN\",\"PID\",\"DCS\",\"DSR_REQ\",\"PRIORITY\"\n                           ,\"CONCAT_INFO\",\"CLIENT_ID\",\"SUBS_TYPE\",\"APP_NUM\",\"VALIDITY_PERIOD\"\n                           ,\"DIALLED_NUM\",\"ROUTING_TYPE\",\"NODE_ID\",\"MAP_MESSAGE_ID\")\n    \n    sm_main <- rbind(sm_main1,sm_main2)\n   return(sm_main)\n     \n  }\n  \n  get_SmDetail_data <- function(){\n    sm_detail1 <- read.table(\"EVRDATA/EVR_SM_DETAIL_201706012357293.txt\",sep = \",\",dec = \".\")\n    colnames(sm_detail1) <- c(\"SCTS\",\"SCMSGREF\",\"RECORDTYPE\",\"CAUSE\",\"EVENT\",\n                              \"LOGGINGTIME\",\"DEST_IMSI\",\"DEST_VMSCADDR\",\"NUMOFDELATTEMPTS\",\n                              \"ACCESSMETHOD\",\"SMORIGADDR\",\"APP_NUM\",\"SMDESTADDR\",\"ROUTING_TYPE\"\n                              ,\"NODE_ID\",\"MAP_MESSAGE_ID\")\n    \n    sm_detail2<- read.table(\"EVRDATA/EVR_SM_DETAIL_201706012357594.txt\",sep = \",\",dec = \".\")\n    colnames(sm_detail2)<-  c(\"SCTS\",\"SCMSGREF\",\"RECORDTYPE\",\"CAUSE\",\"EVENT\",\n                              \"LOGGINGTIME\",\"DEST_IMSI\",\"DEST_VMSCADDR\",\"NUMOFDELATTEMPTS\",\n                              \"ACCESSMETHOD\",\"SMORIGADDR\",\"APP_NUM\",\"SMDESTADDR\",\"ROUTING_TYPE\"\n                              ,\"NODE_ID\",\"MAP_MESSAGE_ID\")\n    \n    sm_detail <- rbind(sm_detail1,sm_detail2)\n     sm_detail[which(sm_detail$CAUSE == 161 ),] <- \"ERR_VAL_ASE_SC_NO_SUBS\"\n     sm_detail[which(sm_detail$CAUSE == 163 ),] <- \"ERR_VAL_ASE_INV_SME_ADDR\"\n     sm_detail[which(sm_detail$CAUSE == 164 ),] <- \"ERR_VAL_ASE_DEST_SME_BARRED\"\n     sm_detail[which(sm_detail$CAUSE == 165 ),] <- \"ERR_VAL_ASE_DUP_SM_REJECTED\"\n     sm_detail[which(sm_detail$CAUSE == 193 ),] <- \"ERR_VAL_GSM_SC_NO_SUBS \"\n     sm_detail[which(sm_detail$CAUSE == 195 ),] <- \"ERR_VAL_GSM_INV_SME_ADDR \"\n     sm_detail[which(sm_detail$CAUSE == 196 ),] <- \"ERR_VAL_GSM_DEST_SME_BARRED \"\n     sm_detail[which(sm_detail$CAUSE == 197 ),] <- \"ERR_VAL_GSM_DUP_SM_REJECTED \"\n     sm_detail[which(sm_detail$CAUSE == 256 ),] <- \"ERR_OK \"\n     sm_detail[which(sm_detail$CAUSE == 257 ),] <- \"ERR_TL_LIB_DECODE\"\n     sm_detail[which(sm_detail$CAUSE == 258 ),] <- \"ERR_TL_LIB_ENCODE\"\n     sm_detail[which(sm_detail$CAUSE == 259 ),] <- \"ERR_MSGTYPE_NOT_SUPPORTED\"\n     sm_detail[which(sm_detail$CAUSE == 260 ),] <-  \"ERR_CMD_ACTION_OK\"\n     sm_detail[which(sm_detail$CAUSE == 261 ),] <- \"ERR_RL_PROTOCOL\"\n     sm_detail[which(sm_detail$CAUSE == 262 ),] <- \"ERR_RL_RSP_TIMEOUT\"\n     sm_detail[which(sm_detail$CAUSE == 263 ),] <- \"ERR_RL_UNKNOWN\"\n     sm_detail[which(sm_detail$CAUSE == 264 ),] <- \"ERR_VP_OVER\"\n     sm_detail[which(sm_detail$CAUSE == 265 ),] <- \"ERR_TIMER_FAIL\"\n     sm_detail[which(sm_detail$CAUSE == 266 ),] <- \"ERR_SESSION_PRESENT\"\n     sm_detail[which(sm_detail$CAUSE == 267 ),] <- \"ERR_SESSION_NOT_PRESENT\"\n     sm_detail[which(sm_detail$CAUSE == 268 ),] <- \"ERR_OK_DELIVER_ACK\"\n     sm_detail[which(sm_detail$CAUSE == 269 ),] <- \"ERR_OK_RL_ERROR\"\n     sm_detail[which(sm_detail$CAUSE == 270 ),] <- \"ERR_OK_DEST_TIMEOUT\"\n     sm_detail[which(sm_detail$CAUSE == 271 ),] <- \"ERR_OK_PERMANENT_ERROR\"\n     sm_detail[which(sm_detail$CAUSE == 272 ),] <- \"ERR_DB_FAIL\"\n     sm_detail[which(sm_detail$CAUSE == 273 ),] <- \"ERR_SMT_FAIL\"\n     sm_detail[which(sm_detail$CAUSE == 274 ),] <- \"ERR_VAL_FAIL\"\n     sm_detail[which(sm_detail$CAUSE == 275 ),] <- \"ERR_WRITE_MSGQ_FAIL\"\n     sm_detail[which(sm_detail$CAUSE == 276 ),] <- \"ERR_TIMESTAMP_VAL\"\n     sm_detail[which(sm_detail$CAUSE == 277 ),] <- \"ERR_MSG_ALREADY_DISPATCHED\"\n     sm_detail[which(sm_detail$CAUSE == 278 ),] <- \"ERR_INFO_ELMNT_DECODE\"\n     sm_detail[which(sm_detail$CAUSE == 279 ),] <- \"RCVD_DELETE_CMD\"\n     sm_detail[which(sm_detail$CAUSE == 280 ),] <- \"ERR_DELIVER_NACK\"\n     sm_detail[which(sm_detail$CAUSE == 281 ),] <- \"ERR_NONGUARANTEED_MSG\"\n     sm_detail[which(sm_detail$CAUSE == 282 ),] <- \"ERR_MSG_TIMEOUT\"\n     sm_detail[which(sm_detail$CAUSE == 283 ),] <- \"ERR_THROTTLING_CONGESTION\"\n     sm_detail[which(sm_detail$CAUSE == 284 ),] <- \"ERR_DELETED_BY_OPERATOR\"\n     sm_detail[which(sm_detail$CAUSE == 285 ),] <- \"ERR_MAX_NO_OF_ATMPT_REACHED\"\n     sm_detail[which(sm_detail$CAUSE == 286 ),] <- \"ERR_SPOOF_DETECTED\"\n     sm_detail[which(sm_detail$CAUSE == 287 ),] <- \"ERR_CGW_TIME_OUT\"\n     sm_detail[which(sm_detail$CAUSE == 288 ),] <- \"ERR_CGW_INSUFFICIENT_BALANCE\"\n     sm_detail[which(sm_detail$CAUSE == 289 ),] <- \"ERR_CGW_INVALID_AMOUNT\"\n     sm_detail[which(sm_detail$CAUSE == 290 ),] <- \"ERR_CGW_INVALID_MSISDN\"\n     sm_detail[which(sm_detail$CAUSE == 291 ),] <- \"ERR_CGW_GEN_FAILURE\"\n     sm_detail[which(sm_detail$CAUSE == 292 ),] <- \"ERR_CGW_RESTRICTED_MSISDN\"\n     sm_detail[which(sm_detail$CAUSE == 293 ),] <- \"ERR_CGW_NO_SUBSCRIBER_FOUND\"\n     sm_detail[which(sm_detail$CAUSE == 294 ),] <- \"ERR_CGW_INVALID_OPERATION\"\n     sm_detail[which(sm_detail$CAUSE == 295 ),] <- \"ERR_CGW_INVALID_INTERFACE\"\n     sm_detail[which(sm_detail$CAUSE == 296 ),] <- \"ERR_CGW_CAUGHT_EXCEPTION\"\n     sm_detail[which(sm_detail$CAUSE == 297 ),] <- \"ERR_CGW_INTERFACE_NOT_RUNNING\"\n     sm_detail[which(sm_detail$CAUSE == 298 ),] <- \"ERR_CGW_OPERATION_NOT_SUPPORTED\"\n     sm_detail[which(sm_detail$CAUSE == 299 ),] <- \"ERR_CGW_IN_OVERLOAD\"\n     sm_detail[which(sm_detail$CAUSE == 300 ),] <- \"ERR_CGW_UNKNOWN_ERROR\"\n     sm_detail[which(sm_detail$CAUSE == 301 ),] <- \"EVR_REDIRECTED_TO_APP\"\n     sm_detail[which(sm_detail$CAUSE == 302 ),] <- \"EVR_PARENTAL_CHECK_FAIL\"\n     sm_detail[which(sm_detail$CAUSE == 303 ),] <- \"EVR_AO_CHARGING_SENT\"\n     \n    return(sm_detail)\n  }\n  get_SrMain_data <- function(){\n   sr_main1 <- read.table(\"EVRDATA/EVR_SR_MAIN_201706012357293.txt\",sep = \",\",dec = \".\")\n   colnames(sr_main1)<-c(\"SCTS\",\"SCMSGREF\",\"SRORIGADDR\",\"SRDESTADDR\",\"MSGID\",\"SR_SCTS\",\n                         \"SM_STATUS\",\"SM_ERRCODE\",\"CAUSE\",\"EVENT\",\"ACCESSMETHOD\",\"DIALLED_NUM\",\n                         \"LOGGINGTIME\",\"NODE_ID\",\"MAP_MESSAGE_ID\") \n   \n   sr_main2 <- read.table(\"EVRDATA/EVR_SR_MAIN_201706012357594.txt\",sep = \",\",dec = \".\")\n   colnames(sr_main2)<-c(\"SCTS\",\"SCMSGREF\",\"SRORIGADDR\",\"SRDESTADDR\",\"MSGID\",\"SR_SCTS\",\n                         \"SM_STATUS\",\"SM_ERRCODE\",\"CAUSE\",\"EVENT\",\"ACCESSMETHOD\",\"DIALLED_NUM\",\n                         \"LOGGINGTIME\",\"NODE_ID\",\"MAP_MESSAGE_ID\") \n   \n   sr_main  <- rbind(sr_main1,sr_main2)\n   return(get_SrMain_data)\n  }\n  get_SrDetail_data <- function(){\n    sr_detail1 <- read.table(\"EVRDATA/EVR_SR_DETAIL_201706012357293.txt\",sep = \",\",dec = \".\")\n    colnames(sr_detail1)<- c(\"SCTS\",\"SCMSGREF\",\"CAUSE\",\"EVENT\",\"ACCESSMETHOD\",\"SRORIGADDR\",\n                             \"SRDESTADDR\",\"LOGGINGTIME\",\"NODE_ID\")\n    sr_detail2 <- read.table(\"EVRDATA/EVR_SR_DETAIL_201706012357594.txt\",sep = \",\",dec = \".\")\n    colnames(sr_detail2)<- c(\"SCTS\",\"SCMSGREF\",\"CAUSE\",\"EVENT\",\"ACCESSMETHOD\",\"SRORIGADDR\",\n                             \"SRDESTADDR\",\"LOGGINGTIME\",\"NODE_ID\")\n    sr_detail <- rbind(sr_detail1,sr_detail2)\n    return(sr_detail)\n  }\n    \n  sm_mainData <-  get_SmMain_data()\n  sm_detailData <- get_SmDetail_data()\n  sr_detailData <- get_SrDetail_data()\n  sr_mainData <- get_SrMain_data()\n  \n  output$distPlot <- renderPlot({\n\n    # generate bins based on input$bins from ui.R\n    x    <- faithful[, 2]\n    bins <- seq(min(x), max(x), length.out = input$bins + 1)\n\n    # draw the histogram with the specified number of bins\n    hist(x, breaks = bins, col = 'darkgray', border = 'white')\n\n  })\n\n})\n",
    "created" : 1500023664209.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "775635823",
    "id" : "E4113116",
    "lastKnownWriteTime" : 1500375432,
    "last_content_update" : 1500375432851,
    "path" : "~/dashboard/evr_vts01/EVR_MAIN/server.R",
    "project_path" : "server.R",
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}